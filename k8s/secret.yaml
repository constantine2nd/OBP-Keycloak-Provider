apiVersion: v1
kind: Secret
metadata:
  name: obp-keycloak-secrets
  namespace: default
  labels:
    app: obp-keycloak
    component: user-storage-provider
type: Opaque
data:
  # Database credentials (base64 encoded)
  # To encode: echo -n "your_value" | base64
  DB_USER: b2Jw                    # obp (base64)
  DB_PASSWORD: Y2hhbmdlbWU=        # changeme (base64)

  # Keycloak admin credentials (base64 encoded)
  KEYCLOAK_ADMIN: YWRtaW4=         # admin (base64)
  KEYCLOAK_ADMIN_PASSWORD: YWRtaW4= # admin (base64)

---
apiVersion: v1
kind: Secret
metadata:
  name: obp-keycloak-db-connection
  namespace: default
  labels:
    app: obp-keycloak
    component: database
type: Opaque
stringData:
  # Database connection string (not base64 encoded when using stringData)
  DB_URL: "jdbc:postgresql://postgresql-service:5432/obp_mapped"

  # Alternative format for different environments
  DB_URL_DEV: "jdbc:postgresql://postgres-dev:5432/obp_mapped_dev"
  DB_URL_STAGING: "jdbc:postgresql://postgres-staging:5432/obp_mapped_staging"
  DB_URL_PROD: "jdbc:postgresql://postgres-prod:5432/obp_mapped_prod"

---
# Example of using external secret management
apiVersion: v1
kind: Secret
metadata:
  name: obp-keycloak-external-secrets
  namespace: default
  labels:
    app: obp-keycloak
    component: user-storage-provider
  annotations:
    # Example annotations for external secret operators
    external-secrets.io/backend: "vault"
    external-secrets.io/key-name: "secret/obp/keycloak"
type: Opaque
data:
  # These would typically be populated by external secret operators
  # like External Secrets Operator, Vault Agent, etc.
  DB_USER: ""
  DB_PASSWORD: ""
  DB_URL: ""

---
# Development/Testing secret with sample data
apiVersion: v1
kind: Secret
metadata:
  name: obp-keycloak-dev-secrets
  namespace: default
  labels:
    app: obp-keycloak
    component: user-storage-provider
    environment: development
type: Opaque
stringData:
  # Development database (using stringData for readability)
  DB_URL: "jdbc:postgresql://postgres-dev:5432/obp_mapped_dev"
  DB_USER: "obp_dev"
  DB_PASSWORD: "dev_password_123"

  # Development Keycloak admin
  KEYCLOAK_ADMIN: "dev_admin"
  KEYCLOAK_ADMIN_PASSWORD: "dev_admin_123"

  # Additional development configurations
  JWT_SECRET: "dev_jwt_secret_key_for_testing_only"
  ENCRYPTION_KEY: "dev_encryption_key_32_chars_long"

---
# Production secret template (values should be replaced)
apiVersion: v1
kind: Secret
metadata:
  name: obp-keycloak-prod-secrets
  namespace: production
  labels:
    app: obp-keycloak
    component: user-storage-provider
    environment: production
type: Opaque
stringData:
  # Production database (REPLACE WITH ACTUAL VALUES)
  DB_URL: "jdbc:postgresql://postgres-prod.internal:5432/obp_mapped_prod"
  DB_USER: "REPLACE_WITH_ACTUAL_USER"
  DB_PASSWORD: "REPLACE_WITH_ACTUAL_PASSWORD"

  # Production Keycloak admin (REPLACE WITH ACTUAL VALUES)
  KEYCLOAK_ADMIN: "REPLACE_WITH_ACTUAL_ADMIN"
  KEYCLOAK_ADMIN_PASSWORD: "REPLACE_WITH_ACTUAL_ADMIN_PASSWORD"

  # Production security keys (REPLACE WITH ACTUAL VALUES)
  JWT_SECRET: "REPLACE_WITH_ACTUAL_JWT_SECRET"
  ENCRYPTION_KEY: "REPLACE_WITH_ACTUAL_ENCRYPTION_KEY"

# Usage Notes:
#
# 1. Base64 encoding for data field:
#    echo -n "your_password" | base64
#
# 2. Using stringData (no encoding needed):
#    stringData field automatically encodes values
#
# 3. Apply secrets:
#    kubectl apply -f secret.yaml
#
# 4. View secret (decoded):
#    kubectl get secret obp-keycloak-secrets -o jsonpath='{.data.DB_PASSWORD}' | base64 -d
#
# 5. Create secret from command line:
#    kubectl create secret generic obp-keycloak-secrets \
#      --from-literal=DB_USER=obp \
#      --from-literal=DB_PASSWORD=secure_password \
#      --from-literal=DB_URL=jdbc:postgresql://postgres:5432/obp_mapped
#
# 6. Create secret from environment file:
#    kubectl create secret generic obp-keycloak-secrets --from-env-file=.env
#
# Security Best Practices:
# - Never commit actual passwords to version control
# - Use external secret management (Vault, AWS Secrets Manager, etc.)
# - Rotate secrets regularly
# - Use least privilege access for secret reading
# - Consider using sealed-secrets or external-secrets operators
# - Encrypt secrets at rest in etcd
