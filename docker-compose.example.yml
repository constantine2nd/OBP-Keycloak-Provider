version: "3.8"

services:
  # PostgreSQL database for Keycloak's internal data
  keycloak-postgres:
    image: postgres:15
    container_name: keycloak-postgres
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak_secure_password
    ports:
      - "5433:5432"
    volumes:
      - keycloak_postgres_data:/var/lib/postgresql/data
    networks:
      - keycloak-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak -d keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: obp-keycloak
    depends_on:
      keycloak-postgres:
        condition: service_healthy
    environment:
      # Keycloak admin credentials
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin_password

      # Keycloak's internal database configuration
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak_secure_password

      # OBP User Storage database configuration (external PostgreSQL)
      DB_URL: jdbc:postgresql://host.docker.internal:5432/obp_mapped
      DB_USER: oidc_user
      DB_PASSWORD:
      DB_DRIVER: org.postgresql.Driver
      DB_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      DB_AUTHUSER_TABLE: v_oidc_users

      # MANDATORY: Provider filtering for user authentication (REQUIRED for security)
      OBP_AUTHUSER_PROVIDER:

      # Hibernate configuration for user storage
      HIBERNATE_DDL_AUTO: validate
      HIBERNATE_SHOW_SQL: "true"
      HIBERNATE_FORMAT_SQL: "true"

      # Keycloak configuration
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_HTTP_ENABLED: "true"
      KC_HEALTH_ENABLED: "true"
      KC_METRICS_ENABLED: "true"
    ports:
      - "8000:8080"
      - "8443:8443"
    networks:
      - keycloak-network
    volumes:
      - keycloak_data:/opt/keycloak/data
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Optional: Admin tool for Keycloak PostgreSQL
  keycloak-pgadmin:
    image: dpage/pgadmin4:latest
    container_name: keycloak-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: keycloak-admin@obp.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGLADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "5051:80"
    depends_on:
      - keycloak-postgres
    networks:
      - keycloak-network
    restart: unless-stopped

volumes:
  keycloak_postgres_data:
  keycloak_data:

networks:
  keycloak-network:
    driver: bridge
# Usage with External OBP Database:
# 1. Ensure external PostgreSQL has 'obp_mapped' database with 'oidc_user'
# 2. Start services:
#    docker-compose -f docker-compose.example.yml up
#
# 3. Access Keycloak admin console:
#    http://localhost:8000/admin (admin/admin_password)
#
# 4. Access Keycloak database via pgAdmin:
#    http://localhost:5051 (keycloak-admin@obp.com/admin)
#
# External PostgreSQL Requirements for OBP User Federation:
#   - Database 'obp_mapped' accessible on localhost:5432
#   - User 'oidc_user' with SELECT permissions on v_oidc_users view
#   - View 'v_oidc_users' must exist with proper structure
#
# CRITICAL REQUIREMENT:
#   OBP_AUTHUSER_PROVIDER must be set to match your provider
#   Edit the environment variable above or set it in your environment:
#   export OBP_AUTHUSER_PROVIDER=your_provider_name
